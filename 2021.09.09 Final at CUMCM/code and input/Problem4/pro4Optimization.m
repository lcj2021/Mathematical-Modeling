clear all; clc;
load pro4OptiInput

global i;
attachBOut = [];        %% 附件B的输出
attachAOut = [];        %% 附件A的输出
productVolume = [];     %% 产能

%% 对24周循环 做整数非线性规划
for i = 1 : 24
    %% 不等式约束 MATLAB遗传算法不能同时限制整数和等式约束,...因此用a<=1&&-a<=-1来表示a==1
    A = [
    % 预测得到的缺货空窗期 不能订货
    zeros(1, 8 * 11), g(1, i),g(2, i),g(3, i),g(4, i),g(5, i),g(6, i),...
    g(7, i),g(8, i),g(9, i), g(10, i), g(11, i);
    % 每个供应商都有且仅有 1 家 转运商负责转运
    [[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 10),zeros(1,11)];
    [repmat([0 0 0 0 0 0 0 0], 1, 1),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 9),zeros(1,11)];
    [repmat([0 0 0 0 0 0 0 0], 1, 2),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 8),zeros(1,11)];
    [repmat([0 0 0 0 0 0 0 0], 1, 3),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 7),zeros(1,11)];
    [repmat([0 0 0 0 0 0 0 0], 1, 4),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 6),zeros(1,11)];
    [repmat([0 0 0 0 0 0 0 0], 1, 5),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 5),zeros(1,11)];
    [repmat([0 0 0 0 0 0 0 0], 1, 6),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 4),zeros(1,11)];
    [repmat([0 0 0 0 0 0 0 0], 1, 7),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 3),zeros(1,11)];
    [repmat([0 0 0 0 0 0 0 0], 1, 8),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 2),zeros(1,11)];
    [repmat([0 0 0 0 0 0 0 0], 1, 9),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 1),zeros(1,11)];
    [repmat([0 0 0 0 0 0 0 0], 1, 10),[1 1 1 1 1 1 1 1],zeros(1,11)];
    %% 以下为上面不等式的对称部分
    -[zeros(1, 8 * 11), g(1, i),g(2, i),g(3, i),g(4, i),g(5, i),g(6, i),...
    g(7, i),g(8, i),g(9, i), g(10, i), g(11, i)];
    
    -[[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 10),zeros(1,11)];
    -[repmat([0 0 0 0 0 0 0 0], 1, 1),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 9),zeros(1,11)];
    -[repmat([0 0 0 0 0 0 0 0], 1, 2),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 8),zeros(1,11)];
    -[repmat([0 0 0 0 0 0 0 0], 1, 3),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 7),zeros(1,11)];
    -[repmat([0 0 0 0 0 0 0 0], 1, 4),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 6),zeros(1,11)];
    -[repmat([0 0 0 0 0 0 0 0], 1, 5),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 5),zeros(1,11)];
    -[repmat([0 0 0 0 0 0 0 0], 1, 6),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 4),zeros(1,11)];
    -[repmat([0 0 0 0 0 0 0 0], 1, 7),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 3),zeros(1,11)];
    -[repmat([0 0 0 0 0 0 0 0], 1, 8),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 2),zeros(1,11)];
    -[repmat([0 0 0 0 0 0 0 0], 1, 9),[1 1 1 1 1 1 1 1],repmat([0 0 0 0 0 0 0 0], 1, 1),zeros(1,11)];
    -[repmat([0 0 0 0 0 0 0 0], 1, 10),[1 1 1 1 1 1 1 1],zeros(1,11)];
    ];

    B = [    0;1;1;1;1;1;1;1;1;1;1;1;
            0;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;-1;];
    
    %% 决策变量 : x = 8(转运商) * 11(供应商)的指派矩阵 q + 11个供应商的供货量 o
    lb = zeros(1, 8 * 11 + 11);
    % 上界 : q的上界为1, o的上界为供应商最大供货量排名前15周的平均值
    ub = [ones(1, 88), [2276.47,967.87,4870.80,6000.00,6000.00,3909.27,4811.13,4929.13,4897.73,3108.20,3511.47 ]];
    
    intcon = 1 : 99;
    option = optimoptions(@ga, 'Generations', 150);
    [x,fval] = ga(@goal, 99, A, B, [], [], lb, ub, @nonlcon, intcon); 
    q = reshape(x(1 : 88), [8, 11]);   %% 将q还原成8 x 11便于观察
    oMat = x(89 : 99);
    oMat = repmat(oMat, 8, 1);
    attachBOut = [attachBOut, (oMat .* q)'];     %% 附件B的输出结果
    productVolume = [productVolume, fval];      %% 每周的总产量
    
end
for j = 1 : 8 : 192
    attachAOut = [attachAOut, sum(attachBOut(:, j : j + 7), 2)];
end

%% 第四问的非线性约束 - 转运商转运量总和 <= 6000
function [c,ceq]=nonlcon(x)
    o = x(89 : 99);            %% 截取决策变量o矩阵为 11 x 1列矩阵  
    q = x(1 : 88);          %% 截取决策变量q矩阵为 88 x 1列矩阵
    o = o(:);
    q = reshape(q, [8, 11]);    %% 将q 转成 8 x 11矩阵
    c(1) = q(1, :) * o - 6000;  %% 每个转运商转运量总和 <= 6000
    c(2) = q(2, :) * o - 6000;
    c(3) = q(3, :) * o - 6000;
    c(4) = q(4, :) * o - 6000;
    c(5) = q(5, :) * o - 6000;
    c(6) = q(6, :) * o - 6000;
    c(7) = q(7, :) * o - 6000;
    c(8) = q(8, :) * o - 6000;
    ceq = [];  
end

%% 适应度(目标)函数含义为 考虑供应商转运商损耗率后的产量
function out = goal(x)
    global i;
    load pro4OptiInput;
    bb = 1 - b(:, i)';      %% bb为接受率
    out = 0;
    o = x(89 : 99);            %% 截取决策变量o矩阵为 11 x 1列矩阵
    o = o(:);
    q = x(1 : 88);          %% 截取决策变量q矩阵为 88 x 1列矩阵
    q = q(:);
    q = reshape(q, [8, 11]);    %% 将q 转成 8 x 11矩阵
    o = o ./ t;                 %% ABC供货量归一化为成品量
    tmp = q * o;    %% 含义: 每个转运商运输的总产品量
    out = -bb * tmp;    %% 添符号取最大值
end